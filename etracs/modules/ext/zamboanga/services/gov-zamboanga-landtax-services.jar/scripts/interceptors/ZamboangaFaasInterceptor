import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*


class ZamboangaFaasInterceptor {
	@DataContext('rptledger')
	def em_rptledger

	@DataContext('rptledger_faas')
	def em_rptledgerfaas

	@Service('RPTUtil')
	def util
	

	@After(pattern="FAASService.updateFaas", index=10000)
	public void afterUpdateFaas(evt) {
		def faas = evt.result
		updateLedgerInfo(faas)
	}

	@Before(pattern="FAASService.deleteFaas", index=10000)
	public void beforeDeleteFaas(evt) {
		def faas = evt.args[0]
		unmapFaasFromLedger(faas)
	}

	void unmapFaasFromLedger(faas) {
		if (util.isTrue(faas.datacapture)) {
			def rptledgers = em_rptledger.select('objid').find([faasid: faas.objid]).list()
			rptledgers.each {
				em_rptledger.find(it).update([faasid: null])
				em_rptledgerfaas.find([rptledgerid: it.objid]).update([faasid: null])
			}
		}
	}

	void updateLedgerInfo(faas) {
		def ledger = em_rptledger.select('objid').find([faasid: faas.objid]).first()
		if (ledger) {
			def info = [:]
			info.taxpayer = faas.taxpayer
			info.owner = faas.owner
			info.administrator = faas.administrator
			em_rptledger.find([objid: ledger.objid]).update(info)
		}
	}
}